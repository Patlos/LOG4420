gameBook.controller('gameController', function ($scope, $http, gameModel,PersonModel) {
	var numberRound = 1;
	
    $scope.decisions;
    
    $scope.currentPage = gameModel.getCurrentPage();
	if($scope.currentPage == 325 || $scope.currentPage == 158 || $scope.currentPage == 265){
		$("section#decision").hide();
	}
	
	
    $scope.story = [];
    $scope.image = [];
    $scope.battles= [];
    $scope.jeterObjets = [];
    $scope.situations = [];

    $scope.disciplines = gameModel.getDisciplines();
    $scope.piecesOr = gameModel.getUserStats("pieces_or");
    $scope.pntHabilete = gameModel.getUserStats("pnt_habilete");
    $scope.pntEndurance = gameModel.getUserStats("pnt_endurance");
    $scope.pntEnduranceTotal = gameModel.getUserStats("pnt_endurance_total");
    $scope.items = gameModel.getItems();

    $scope.initPage = function(){
        $http({method: 'GET', url: 'http://localhost:3000/service/' +  $scope.currentPage})
        .success(function(data) { 
			if(data.paragraph.length == 0 && data.decision.length == 0){
				$scope.story.push("Ce page n'exist pas!");
				$scope.decisions = data.decision;
				$("section#decision").css("display", "none");
			}else{
				$scope.story = [];
				$scope.image = [];
				$scope.battles= [];
				$scope.jeter = [];
				for (var i = 0; i < data.paragraph.length; i++) {
					console.log(data.paragraph[i]);
					if(data.paragraph[i].p != undefined)
					{
						$scope.story.push(data.paragraph[i].p);
					}else if(data.paragraph[i].throw != undefined){

						$scope.jeterObjets.push(data.paragraph[i].throw);
					}else if(data.paragraph[i].battle != undefined){

						$scope.battles.push(data.paragraph[i].battle);
					}else if(data.paragraph[i].image != undefined){

						$scope.image.push(data.paragraph[i].image);
					}else if(data.paragraph[i].lossPoints != undefined){

						$scope.situations.push(data.paragraph[i].lossPoints);
					}

				}; 
				$scope.paraphsForDecision = data.paraphForDecision;
				if(data.decision.length == 0){
					$("section#decision").css("display", "none");
				}else{
					$scope.decisions = data.decision;
				}
				
			}
		})
        .error(function(data) { $scope.info = "erreur"; })
    };

    $scope.nextPage = function(pageNumber){
        window.localStorage.setItem("pageActuelle", pageNumber);
		if($scope.currentPage == 325){
			var pntEndurance = $("#pnt_endurance_restante").text();
			PersonModel.setEnduranceLS(pntEndurance);
		}else if($scope.currentPage == 158){
			var currentItems = $("section#sac_a_dos ul li");
			PersonModel.setItemsLS(currentItems);
		}else if($scope.currentPage == 265){
			var pntEndurance = $("#pnt_endurance_restante").text();
			PersonModel.setEnduranceLS(pntEndurance);
		}
        location.reload();

    };

   $scope.displayThrow = function(value){
        return value == undefined;
    };

    $scope.combattre = function(){
		var endurance_restante_joueur = $("#pnt_endurance_restante").text();
		var pnt_attaque = $("#nb_pnt_attaque").text();
		
		var endurance_monstre = $("#pnt_endurance_monstre").text();
		var pnt_attaque_monstre = $("#pnt_attaque_monstre").text();

		var quotient_attaque = pnt_attaque - pnt_attaque_monstre;

		var nb_aleatoire = Math.floor((Math.random()*10)); 

		var table = createCombatTable(endurance_restante_joueur, endurance_monstre);

		var quotient_attaque_index = quotient_attaque + 11;
		if (quotient_attaque_index < 0) {
			   quotient_attaque_index = 0;
		}
		else if(quotient_attaque_index > 22) {
				quotient_attaque_index = 22;
		}

		var hitOnPlayer = table[nb_aleatoire][quotient_attaque_index][1];
		var hitOnMonster = table[nb_aleatoire][quotient_attaque_index][0];

		endurance_restante_joueur = endurance_restante_joueur - hitOnPlayer;
		if (endurance_restante_joueur < 0) {
				endurance_restante_joueur = 0;
		}

		endurance_monstre = endurance_monstre - hitOnMonster;
		if (endurance_monstre < 0) {
				endurance_monstre = 0;
		}

		var section = '<section><h3>Ronde combat: <span>' + numberRound + '</span></h3><p>Ratio de combat: ' + quotient_attaque + "<br/>Chiffre aléatoire: " + nb_aleatoire + "</p><p>Ton enemi a obtenu <i>" + hitOnMonster + "</i> dégâts -<br/>et a maintenant <i>" + endurance_monstre + "</i> points d'endurance.</p><p>Lone Wolf a eu <i>" + hitOnPlayer + "</i> dégâts -<br/>et a maintenant <i>" + endurance_restante_joueur + "</i> points d'endurance.</p></section>";
		
		$("#combat .choixCombat").before(section);

		//Mettre à jour les données de la page
		$("#pnt_endurance_restante").text(endurance_restante_joueur);
		$("#pnt_endurance_monstre").text(endurance_monstre);
		$("section.choixCombat button#fuir").attr("disabled", false);
		
		numberRound++;

		if (endurance_monstre == 0) {
				$("#combat .choixCombat").before("<h3>Vous avez vaincu l'ennemi!!!</h3>");
				$("section#combat section.choixCombat").css("display", "none");
				$("p.paraphForDecision").css("display", "block");
				$("section#decision").css("display", "block");
		}

    };

    $scope.fuir = function(){
		if(numberRound>1){
			$("#combat .choixCombat").before("<h3>Vous avez fuit l'ennemi avec succès!!!</h3>");
			$("section#combat section.choixCombat").css("display", "none");
			$("p.paraphForDecision").css("display", "block");
			$("section#decision").css("display", "block");
		}
    };

    $scope.JetterItems = function(){
		var checkedObjets = $("section#jeterObjets input:checked");
		if (checkedObjets.length != 2) {
				alert('Vous devez jeter EXACTEMENT deux objets de votre sac à dos');
		} else {
				var items = JSON.parse(localStorage["items"]);
				jQuery.each(checkedObjets, function() {
						var checkedObjectName = this.name;
						$('section#sac_a_dos li[name="' + checkedObjectName + '"]').remove();
				});
				$("p.paraphForDecision").css("display", "block");
				$("section#decision").css("display", "block");
				$("section#jeterObjets button").css("display", "none");
		}
    };

    $scope.situationAction = function(pointLost){
		var lifePoints = $("section#stats #pnt_endurance_restante");
		lifePoints.text(lifePoints.text() - pointLost);
		$(this).css("display", "none");
		$("p.paraphForDecision").css("display", "block");
		$("section#decision").css("display", "block");
    };
    
  }
);

function createCombatTable(enduranceTotalJoueur, enduranceTotalMonstre) {
		var table = createArray(10, 23, 2);
		table[0][0][0] = 6;
		table[0][0][1] = 0;
		table[0][1][0] = 7;
		table[0][1][1] = 0;
		table[0][2][0] = 7;
		table[0][2][1] = 0;
		table[0][3][0] = 8;
		table[0][3][1] = 0;
		table[0][4][0] = 8;
		table[0][4][1] = 0;
		table[0][5][0] = 9;
		table[0][5][1] = 0;
		table[0][6][0] = 9;
		table[0][6][1] = 0;
		table[0][7][0] = 10;
		table[0][7][1] = 0;
		table[0][8][0] = 10;
		table[0][8][1] = 0;
		table[0][9][0] = 11;
		table[0][9][1] = 0;
		table[0][10][0] = 11;
		table[0][10][1] = 0;
		table[0][11][0] = 12;
		table[0][11][1] = 0;
		table[0][12][0] = 14;
		table[0][12][1] = 0; 
		table[0][13][0] = 14;
		table[0][13][1] = 0;
		table[0][14][0] = 16;
		table[0][14][1] = 0;
		table[0][15][0] = 16;
		table[0][15][1] = 0;
		table[0][16][0] = 18;
		table[0][16][1] = 0;
		table[0][17][0] = 18;
		table[0][17][1] = 0;
		table[0][18][0] = enduranceTotalMonstre;
		table[0][18][1] = 0;
		table[0][19][0] = enduranceTotalMonstre;
		table[0][19][1] = 0;
		table[0][20][0] = enduranceTotalMonstre;
		table[0][20][1] = 0;
		table[0][21][0] = enduranceTotalMonstre;
		table[0][21][1] = 0;
		table[0][22][0] = enduranceTotalMonstre;
		table[0][22][1] = 0;
		
		table[1][0][0] = 0;
		table[1][0][1] = enduranceTotalJoueur;
		table[1][1][0] = 0;
		table[1][1][1] = enduranceTotalJoueur;
		table[1][2][0] = 0;
		table[1][2][1] = enduranceTotalJoueur;
		table[1][3][0] = 0;
		table[1][3][1] = 8;
		table[1][4][0] = 0;
		table[1][4][1] = 8;
		table[1][5][0] = 0;
		table[1][5][1] = 6;
		table[1][6][0] = 0;
		table[1][6][1] = 6;
		table[1][7][0] = 1;
		table[1][7][1] = 6;
		table[1][8][0] = 1;
		table[1][8][1] = 6;
		table[1][9][0] = 2;
		table[1][9][1] = 5;
		table[1][10][0] = 2;
		table[1][10][1] = 5;
		table[1][11][0] = 3;
		table[1][11][1] = 5;
		table[1][12][0] = 4;
		table[1][12][1] = 5; 
		table[1][13][0] = 4;
		table[1][13][1] = 5;
		table[1][14][0] = 5;
		table[1][14][1] = 4;
		table[1][15][0] = 5;
		table[1][15][1] = 4;
		table[1][16][0] = 6;
		table[1][16][1] = 4;
		table[1][17][0] = 6;
		table[1][17][1] = 4;
		table[1][18][0] = 7;
		table[1][18][1] = 4;
		table[1][19][0] = 7;
		table[1][19][1] = 4;
		table[1][20][0] = 8;
		table[1][20][1] = 3;
		table[1][21][0] = 8;
		table[1][21][1] = 3;
		table[1][22][0] = 9;
		table[1][22][1] = 3;
		
		table[2][0][0] = 0;
		table[2][0][1] = enduranceTotalJoueur;
		table[2][1][0] = 0;
		table[2][1][1] = 8;
		table[2][2][0] = 0;
		table[2][2][1] = 8;
		table[2][3][0] = 0;
		table[2][3][1] = 7;
		table[2][4][0] = 0;
		table[2][4][1] = 7;
		table[2][5][0] = 1;
		table[2][5][1] = 6;
		table[2][6][0] = 1;
		table[2][6][1] = 6;
		table[2][7][0] = 2;
		table[2][7][1] = 5;
		table[2][8][0] = 2;
		table[2][8][1] = 5;
		table[2][9][0] = 3;
		table[2][9][1] = 5;
		table[2][10][0] = 3;
		table[2][10][1] = 5;
		table[2][11][0] = 4;
		table[2][11][1] = 4;
		table[2][12][0] = 5;
		table[2][12][1] = 4; 
		table[2][13][0] = 5;
		table[2][13][1] = 4;
		table[2][14][0] = 6;
		table[2][14][1] = 3;
		table[2][15][0] = 6;
		table[2][15][1] = 3;
		table[2][16][0] = 7;
		table[2][16][1] = 3;
		table[2][17][0] = 7;
		table[2][17][1] = 3;
		table[2][18][0] = 8;
		table[2][18][1] = 3;
		table[2][19][0] = 8;
		table[2][19][1] = 3;
		table[2][20][0] = 9;
		table[2][20][1] = 3;
		table[2][21][0] = 9;
		table[2][21][1] = 3;
		table[2][22][0] = 10;
		table[2][22][1] = 2;

		table[3][0][0] = 0;
		table[3][0][1] = 8;
		table[3][1][0] = 0;
		table[3][1][1] = 7;
		table[3][2][0] = 0;
		table[3][2][1] = 7;
		table[3][3][0] = 1;
		table[3][3][1] = 6;
		table[3][4][0] = 1;
		table[3][4][1] = 6;
		table[3][5][0] = 2;
		table[3][5][1] = 5;
		table[3][6][0] = 2;
		table[3][6][1] = 5;
		table[3][7][0] = 3;
		table[3][7][1] = 5;
		table[3][8][0] = 3;
		table[3][8][1] = 5;
		table[3][9][0] = 4;
		table[3][9][1] = 4;
		table[3][10][0] = 4;
		table[3][10][1] = 4;
		table[3][11][0] = 5;
		table[3][11][1] = 4;
		table[3][12][0] = 6;
		table[3][12][1] = 3; 
		table[3][13][0] = 6;
		table[3][13][1] = 3;
		table[3][14][0] = 7;
		table[3][14][1] = 3;
		table[3][15][0] = 7;
		table[3][15][1] = 3;
		table[3][16][0] = 8;
		table[3][16][1] = 3;
		table[3][17][0] = 8;
		table[3][17][1] = 3;
		table[3][18][0] = 9;
		table[3][18][1] = 2;
		table[3][19][0] = 9;
		table[3][19][1] = 2;
		table[3][20][0] = 10;
		table[3][20][1] = 2;
		table[3][21][0] = 10;
		table[3][21][1] = 2;
		table[3][22][0] = 11;
		table[3][22][1] = 2;

		table[4][0][0] = 0;
		table[4][0][1] = 8;
		table[4][1][0] = 1;
		table[4][1][1] = 7;
		table[4][2][0] = 1;
		table[4][2][1] = 7;
		table[4][3][0] = 2;
		table[4][3][1] = 6;
		table[4][4][0] = 2;
		table[4][4][1] = 6;
		table[4][5][0] = 3;
		table[4][5][1] = 5;
		table[4][6][0] = 3;
		table[4][6][1] = 5;
		table[4][7][0] = 4;
		table[4][7][1] = 4;
		table[4][8][0] = 4;
		table[4][8][1] = 4;
		table[4][9][0] = 5;
		table[4][9][1] = 4;
		table[4][10][0] = 5;
		table[4][10][1] = 4;
		table[4][11][0] = 6;
		table[4][11][1] = 3;
		table[4][12][0] = 7;
		table[4][12][1] = 3; 
		table[4][13][0] = 7;
		table[4][13][1] = 3;
		table[4][14][0] = 8;
		table[4][14][1] = 2;
		table[4][15][0] = 8;
		table[4][15][1] = 2;
		table[4][16][0] = 9;
		table[4][16][1] = 2;
		table[4][17][0] = 9;
		table[4][17][1] = 2;
		table[4][18][0] = 10;
		table[4][18][1] = 2;
		table[4][19][0] = 10;
		table[4][19][1] = 2;
		table[4][20][0] = 11;
		table[4][20][1] = 2;
		table[4][21][0] = 11;
		table[4][21][1] = 2;
		table[4][22][0] = 12;
		table[4][22][1] = 2;

		table[5][0][0] = 1;
		table[5][0][1] = 7;
		table[5][1][0] = 2;
		table[5][1][1] = 6;
		table[5][2][0] = 2;
		table[5][2][1] = 6;
		table[5][3][0] = 3;
		table[5][3][1] = 5;
		table[5][4][0] = 3;
		table[5][4][1] = 5;
		table[5][5][0] = 4;
		table[5][5][1] = 4;
		table[5][6][0] = 4;
		table[5][6][1] = 4;
		table[5][7][0] = 5;
		table[5][7][1] = 4;
		table[5][8][0] = 5;
		table[5][8][1] = 4;
		table[5][9][0] = 6;
		table[5][9][1] = 3;
		table[5][10][0] = 6;
		table[5][10][1] = 3;
		table[5][11][0] = 7;
		table[5][11][1] = 2;
		table[5][12][0] = 8;
		table[5][12][1] = 2; 
		table[5][13][0] = 8;
		table[5][13][1] = 2;
		table[5][14][0] = 9;
		table[5][14][1] = 2;
		table[5][15][0] = 9;
		table[5][15][1] = 2;
		table[5][16][0] = 10;
		table[5][16][1] = 2;
		table[5][17][0] = 10;
		table[5][17][1] = 2;
		table[5][18][0] = 11;
		table[5][18][1] = 2;
		table[5][19][0] = 11;
		table[5][19][1] = 2;
		table[5][20][0] = 12;
		table[5][20][1] = 2;
		table[5][21][0] = 12;
		table[5][21][1] = 2;
		table[5][22][0] = 14;
		table[5][22][1] = 1;

		table[6][0][0] = 2;
		table[6][0][1] = 6;
		table[6][1][0] = 3;
		table[6][1][1] = 6;
		table[6][2][0] = 3;
		table[6][2][1] = 6;
		table[6][3][0] = 4;
		table[6][3][1] = 5;
		table[6][4][0] = 4;
		table[6][4][1] = 5;
		table[6][5][0] = 5;
		table[6][5][1] = 4;
		table[6][6][0] = 5;
		table[6][6][1] = 4;
		table[6][7][0] = 6;
		table[6][7][1] = 3;
		table[6][8][0] = 6;
		table[6][8][1] = 3;
		table[6][9][0] = 7;
		table[6][9][1] = 2;
		table[6][10][0] = 7;
		table[6][10][1] = 2;
		table[6][11][0] = 8;
		table[6][11][1] = 2;
		table[6][12][0] = 9;
		table[6][12][1] = 2; 
		table[6][13][0] = 9;
		table[6][13][1] = 2;
		table[6][14][0] = 10;
		table[6][14][1] = 2;
		table[6][15][0] = 10;
		table[6][15][1] = 2;
		table[6][16][0] = 11;
		table[6][16][1] = 1;
		table[6][17][0] = 11;
		table[6][17][1] = 1;
		table[6][18][0] = 12;
		table[6][18][1] = 1;
		table[6][19][0] = 12;
		table[6][19][1] = 1;
		table[6][20][0] = 14;
		table[6][20][1] = 1;
		table[6][21][0] = 14;
		table[6][21][1] = 1;
		table[6][22][0] = 16;
		table[6][22][1] = 1;
		
		table[7][0][0] = 3;
		table[7][0][1] = 5;
		table[7][1][0] = 4;
		table[7][1][1] = 5;
		table[7][2][0] = 4;
		table[7][2][1] = 5;
		table[7][3][0] = 5;
		table[7][3][1] = 4;
		table[7][4][0] = 5;
		table[7][4][1] = 4;
		table[7][5][0] = 6;
		table[7][5][1] = 3;
		table[7][6][0] = 6;
		table[7][6][1] = 3;
		table[7][7][0] = 7;
		table[7][7][1] = 2;
		table[7][8][0] = 7;
		table[7][8][1] = 2;
		table[7][9][0] = 8;
		table[7][9][1] = 2;
		table[7][10][0] = 8;
		table[7][10][1] = 2;
		table[7][11][0] = 9;
		table[7][11][1] = 1;
		table[7][12][0] = 10;
		table[7][12][1] = 1; 
		table[7][13][0] = 10;
		table[7][13][1] = 1;
		table[7][14][0] = 11;
		table[7][14][1] = 1;
		table[7][15][0] = 11;
		table[7][15][1] = 1;
		table[7][16][0] = 12;
		table[7][16][1] = 0;
		table[7][17][0] = 12;
		table[7][17][1] = 0;
		table[7][18][0] = 14;
		table[7][18][1] = 0;
		table[7][19][0] = 14;
		table[7][19][1] = 0;
		table[7][20][0] = 16;
		table[7][20][1] = 0;
		table[7][21][0] = 16;
		table[7][21][1] = 0;
		table[7][22][0] = 18;
		table[7][22][1] = 0;
		
		table[8][0][0] = 4;
		table[8][0][1] = 4;
		table[8][1][0] = 5;
		table[8][1][1] = 4;
		table[8][2][0] = 5;
		table[8][2][1] = 4;
		table[8][3][0] = 6;
		table[8][3][1] = 3;
		table[8][4][0] = 6;
		table[8][4][1] = 3;
		table[8][5][0] = 7;
		table[8][5][1] = 2;
		table[8][6][0] = 7;
		table[8][6][1] = 2;
		table[8][7][0] = 8;
		table[8][7][1] = 1;
		table[8][8][0] = 8;
		table[8][8][1] = 1;
		table[8][9][0] = 9;
		table[8][9][1] = 1;
		table[8][10][0] = 9;
		table[8][10][1] = 1;
		table[8][11][0] = 10;
		table[8][11][1] = 0;
		table[8][12][0] = 11;
		table[8][12][1] = 0; 
		table[8][13][0] = 11;
		table[8][13][1] = 0;
		table[8][14][0] = 12;
		table[8][14][1] = 0;
		table[8][15][0] = 12;
		table[8][15][1] = 0;
		table[8][16][0] = 14;
		table[8][16][1] = 0;
		table[8][17][0] = 14;
		table[8][17][1] = 0;
		table[8][18][0] = 16;
		table[8][18][1] = 0;
		table[8][19][0] = 16;
		table[8][19][1] = 0;
		table[8][20][0] = 18;
		table[8][20][1] = 0;
		table[8][21][0] = 18;
		table[8][21][1] = 0;
		table[8][22][0] = enduranceTotalMonstre;
		table[8][22][1] = 0;

		table[9][0][0] = 5;
		table[9][0][1] = 3;
		table[9][1][0] = 6;
		table[9][1][1] = 3;
		table[9][2][0] = 6;
		table[9][2][1] = 3;
		table[9][3][0] = 7;
		table[9][3][1] = 2;
		table[9][4][0] = 7;
		table[9][4][1] = 2;
		table[9][5][0] = 8;
		table[9][5][1] = 0;
		table[9][6][0] = 8;
		table[9][6][1] = 0;
		table[9][7][0] = 9;
		table[9][7][1] = 0;
		table[9][8][0] = 9;
		table[9][8][1] = 0;
		table[9][9][0] = 10;
		table[9][9][1] = 0;
		table[9][10][0] = 10;
		table[9][10][1] = 0;
		table[9][11][0] = 11;
		table[9][11][1] = 0;
		table[9][12][0] = 12;
		table[9][12][1] = 0; 
		table[9][13][0] = 12;
		table[9][13][1] = 0;
		table[9][14][0] = 14;
		table[9][14][1] = 0;
		table[9][15][0] = 14;
		table[9][15][1] = 0;
		table[9][16][0] = 16;
		table[9][16][1] = 0;
		table[9][17][0] = 16;
		table[9][17][1] = 0;
		table[9][18][0] = 18;
		table[9][18][1] = 0;
		table[9][19][0] = 18;
		table[9][19][1] = 0;
		table[9][20][0] = enduranceTotalMonstre;
		table[9][20][1] = 0;
		table[9][21][0] = enduranceTotalMonstre;
		table[9][21][1] = 0;
		table[9][22][0] = enduranceTotalMonstre;
		table[9][22][1] = 0;

		return table;
}

function createArray(length) {
		    var arr = new Array(length || 0), i = length;

			if (arguments.length > 1) {
					var args = Array.prototype.slice.call(arguments, 1);
					while(i--) arr[length-1 - i] = createArray.apply(this, args);
			}

			return arr;
}
